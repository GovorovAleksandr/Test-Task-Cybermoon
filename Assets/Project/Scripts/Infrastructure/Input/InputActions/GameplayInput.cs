//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project/Input/GameplayInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @GameplayInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameplayInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""73ccf84d-f0d4-4e62-ac33-e1b074bee771"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""93bce31d-d2c3-4dae-887b-f939421e385a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""6efcc915-a730-47f1-8b6a-98c08ce4bb1c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""65afe57f-b93f-4890-94bc-d68e466f4ec4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ead67beb-9f6d-4eaf-957f-218026cdfb6a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9232a371-db07-4999-a463-9f8c9fe5fe18"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a27ee7a4-2d4a-4b23-b16d-7b88ba924485"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CharacterSelection"",
            ""id"": ""0d5e47f0-56d0-4c9b-b9af-18b02f042062"",
            ""actions"": [
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""b7cbc5e0-728d-437e-8d06-5c0544746cc5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""84c809f4-cad6-4455-bca8-8ecda53042e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""acc2dda8-a09a-4226-a2b4-08217f4246c8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7fffba5-e583-4952-a09f-7be2b9decba4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameMode"",
            ""id"": ""864ba238-9c23-4303-a65a-6f7cd680261a"",
            ""actions"": [
                {
                    ""name"": ""CharacterSelection"",
                    ""type"": ""Button"",
                    ""id"": ""c110d86b-95bc-4e0e-b046-93c2ec10cdb1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gameplay"",
                    ""type"": ""Button"",
                    ""id"": ""50bd7966-51f0-4fa4-a005-6612e1660eea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""810cf685-b15e-4d76-b7fe-a1f2347c7f7d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""CharacterSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1da0b67e-58cb-4342-bf43-c1c4256b7b94"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Gameplay"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
            // CharacterSelection
            m_CharacterSelection = asset.FindActionMap("CharacterSelection", throwIfNotFound: true);
            m_CharacterSelection_Left = m_CharacterSelection.FindAction("Left", throwIfNotFound: true);
            m_CharacterSelection_Right = m_CharacterSelection.FindAction("Right", throwIfNotFound: true);
            // GameMode
            m_GameMode = asset.FindActionMap("GameMode", throwIfNotFound: true);
            m_GameMode_CharacterSelection = m_GameMode.FindAction("CharacterSelection", throwIfNotFound: true);
            m_GameMode_Gameplay = m_GameMode.FindAction("Gameplay", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Movement;
        public struct PlayerActions
        {
            private @GameplayInput m_Wrapper;
            public PlayerActions(@GameplayInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Player_Movement;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // CharacterSelection
        private readonly InputActionMap m_CharacterSelection;
        private List<ICharacterSelectionActions> m_CharacterSelectionActionsCallbackInterfaces = new List<ICharacterSelectionActions>();
        private readonly InputAction m_CharacterSelection_Left;
        private readonly InputAction m_CharacterSelection_Right;
        public struct CharacterSelectionActions
        {
            private @GameplayInput m_Wrapper;
            public CharacterSelectionActions(@GameplayInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Left => m_Wrapper.m_CharacterSelection_Left;
            public InputAction @Right => m_Wrapper.m_CharacterSelection_Right;
            public InputActionMap Get() { return m_Wrapper.m_CharacterSelection; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterSelectionActions set) { return set.Get(); }
            public void AddCallbacks(ICharacterSelectionActions instance)
            {
                if (instance == null || m_Wrapper.m_CharacterSelectionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CharacterSelectionActionsCallbackInterfaces.Add(instance);
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
            }

            private void UnregisterCallbacks(ICharacterSelectionActions instance)
            {
                @Left.started -= instance.OnLeft;
                @Left.performed -= instance.OnLeft;
                @Left.canceled -= instance.OnLeft;
                @Right.started -= instance.OnRight;
                @Right.performed -= instance.OnRight;
                @Right.canceled -= instance.OnRight;
            }

            public void RemoveCallbacks(ICharacterSelectionActions instance)
            {
                if (m_Wrapper.m_CharacterSelectionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICharacterSelectionActions instance)
            {
                foreach (var item in m_Wrapper.m_CharacterSelectionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CharacterSelectionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CharacterSelectionActions @CharacterSelection => new CharacterSelectionActions(this);

        // GameMode
        private readonly InputActionMap m_GameMode;
        private List<IGameModeActions> m_GameModeActionsCallbackInterfaces = new List<IGameModeActions>();
        private readonly InputAction m_GameMode_CharacterSelection;
        private readonly InputAction m_GameMode_Gameplay;
        public struct GameModeActions
        {
            private @GameplayInput m_Wrapper;
            public GameModeActions(@GameplayInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @CharacterSelection => m_Wrapper.m_GameMode_CharacterSelection;
            public InputAction @Gameplay => m_Wrapper.m_GameMode_Gameplay;
            public InputActionMap Get() { return m_Wrapper.m_GameMode; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameModeActions set) { return set.Get(); }
            public void AddCallbacks(IGameModeActions instance)
            {
                if (instance == null || m_Wrapper.m_GameModeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameModeActionsCallbackInterfaces.Add(instance);
                @CharacterSelection.started += instance.OnCharacterSelection;
                @CharacterSelection.performed += instance.OnCharacterSelection;
                @CharacterSelection.canceled += instance.OnCharacterSelection;
                @Gameplay.started += instance.OnGameplay;
                @Gameplay.performed += instance.OnGameplay;
                @Gameplay.canceled += instance.OnGameplay;
            }

            private void UnregisterCallbacks(IGameModeActions instance)
            {
                @CharacterSelection.started -= instance.OnCharacterSelection;
                @CharacterSelection.performed -= instance.OnCharacterSelection;
                @CharacterSelection.canceled -= instance.OnCharacterSelection;
                @Gameplay.started -= instance.OnGameplay;
                @Gameplay.performed -= instance.OnGameplay;
                @Gameplay.canceled -= instance.OnGameplay;
            }

            public void RemoveCallbacks(IGameModeActions instance)
            {
                if (m_Wrapper.m_GameModeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameModeActions instance)
            {
                foreach (var item in m_Wrapper.m_GameModeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameModeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameModeActions @GameMode => new GameModeActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnMovement(InputAction.CallbackContext context);
        }
        public interface ICharacterSelectionActions
        {
            void OnLeft(InputAction.CallbackContext context);
            void OnRight(InputAction.CallbackContext context);
        }
        public interface IGameModeActions
        {
            void OnCharacterSelection(InputAction.CallbackContext context);
            void OnGameplay(InputAction.CallbackContext context);
        }
    }
}
